"""
Django settings for price_adjust_pro project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import dj_database_url

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# React App settings
REACT_APP_DIR = os.path.join(BASE_DIR.parent, 'frontend')
REACT_APP_BUILD_PATH = os.path.join(REACT_APP_DIR, 'build')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'django-insecure-&zm82ml3yp$@aiide2b#(zk%%xhoxcbabfhp=36k&b=ua6x%ff')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'False') == 'True'

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '.onrender.com',
    'priceadjustpro.com',
    'www.priceadjustpro.com',
]

# Gemini API Configuration
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'receipt_parser.apps.ReceiptParserConfig',
    'rest_framework',
    'hijack',
]

# Add middleware to bypass authentication checks for admin and registration

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'hijack.middleware.HijackUserMiddleware',
    'price_adjust_pro.middleware.AuthenticationMiddleware',  # Our custom middleware
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'price_adjust_pro.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
            os.path.join(REACT_APP_BUILD_PATH),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'price_adjust_pro.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Parse database connection url
DATABASE_URL = os.getenv('DATABASE_URL')

# Default to SQLite if no DATABASE_URL is provided
if DATABASE_URL:
    try:
        DATABASES = {
            'default': dj_database_url.config(
                default=DATABASE_URL,
                conn_max_age=600,
                conn_health_checks=True,
            )
        }
    except Exception as e:
        print(f"Error connecting to PostgreSQL: {e}")
        print("Falling back to SQLite database")
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Cache settings for better performance
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}

# Production security settings
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    X_FRAME_OPTIONS = 'DENY'

# Logging configuration for production
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
        'django.db.backends': {
            'level': 'ERROR',
            'handlers': ['console'],
            'propagate': False,
        },
    },
}

# File upload settings - temporary processing only
FILE_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB
FILE_UPLOAD_PERMISSIONS = 0o644

# Receipt processing - delete files after extraction
RECEIPT_KEEP_FILES = False  # Set to True for debugging
RECEIPT_TEMP_DIR = '/tmp/receipt_processing'

# Email configuration for password reset
if DEBUG:
    # In development, use console backend - prints emails to console
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
else:
    # In production, use SMTP
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = 'smtp.mail.me.com'
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True
    EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')

DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'noreply@priceadjustpro.com')
EMAIL_TIMEOUT = 30

# SSL settings for email
if DEBUG:
    # In development, use console backend if no email credentials are provided
    if not os.getenv('EMAIL_HOST_PASSWORD'):
        EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    else:
        # For development with real email, disable SSL verification
        import ssl
        EMAIL_USE_SSL = False
        EMAIL_USE_TLS = True
        EMAIL_SSL_CERTFILE = None
        EMAIL_SSL_KEYFILE = None
else:
    # Production settings - keep SSL verification enabled
    EMAIL_USE_SSL = False
    EMAIL_USE_TLS = True

# Password reset settings
PASSWORD_RESET_TIMEOUT = 3600  # 1 hour in seconds

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# React static files
REACT_STATIC_DIR = os.path.join(REACT_APP_BUILD_PATH, 'static')
STATICFILES_DIRS = []

# Add React build directory if it exists
if os.path.exists(REACT_APP_BUILD_PATH):
    STATICFILES_DIRS.append(REACT_APP_BUILD_PATH)

# Add React static directory if it exists
if os.path.exists(REACT_STATIC_DIR):
    STATICFILES_DIRS.append(REACT_STATIC_DIR)

# Use standard storage in development, compressed in production
if DEBUG:
    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'
else:
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'

# Whitenoise configuration
WHITENOISE_USE_FINDERS = True
WHITENOISE_AUTOREFRESH = DEBUG
WHITENOISE_INDEX_FILE = True
WHITENOISE_MANIFEST_STRICT = False
WHITENOISE_ROOT = STATIC_ROOT

# Media files (Uploaded files)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Authentication settings
LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = '/'  # Redirect to home page
LOGOUT_REDIRECT_URL = 'login'

# CORS settings
CORS_ALLOW_ALL_ORIGINS = DEBUG  # Allow all origins in development
CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000',
    'http://127.0.0.1:3000',
    'https://priceadjustpro.com',
    'https://www.priceadjustpro.com',
]
CORS_ALLOW_CREDENTIALS = True
CORS_EXPOSE_HEADERS = ['Content-Type', 'X-CSRFToken']
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# CSRF settings - properly configured for development and production
CSRF_COOKIE_SECURE = not DEBUG  # False in development, True in production
CSRF_USE_SESSIONS = False
CSRF_COOKIE_HTTPONLY = False
CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_COOKIE_NAME = 'csrftoken'
CSRF_HEADER_NAME = 'HTTP_X_CSRFTOKEN'
CSRF_FAILURE_VIEW = 'django.views.csrf.csrf_failure'

# Add trusted origins for all subdomains
CSRF_TRUSTED_ORIGINS = [
    'https://*.onrender.com',
    'http://*.onrender.com',  # For testing
    'http://localhost:8000',
    'http://127.0.0.1:8000',
    'http://localhost:3000',  # React frontend
    'http://127.0.0.1:3000',  # React frontend
]

# Additional CSRF settings for admin panel
if DEBUG:
    # In development, be more permissive with CSRF
    CSRF_COOKIE_AGE = None  # Use session cookie age
    CSRF_TOKEN_EXPIRES = None  # Don't expire CSRF tokens

# Session settings - properly configured for development and production
SESSION_COOKIE_SAMESITE = 'Lax'
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SECURE = not DEBUG  # False in development, True in production
SESSION_COOKIE_AGE = 1209600  # 2 weeks in seconds
SESSION_ENGINE = 'django.contrib.sessions.backends.db'  # Use database sessions

# Clear domain settings that might cause issues
SESSION_COOKIE_DOMAIN = None
CSRF_COOKIE_DOMAIN = None

# Ensure admin static files are served
ADMIN_MEDIA_PREFIX = '/static/admin/'

# Additional production settings
if not DEBUG:
    # Enable GZip compression
    MIDDLEWARE.insert(1, 'django.middleware.gzip.GZipMiddleware')
    
    # Cache control headers for static files
    WHITENOISE_MAX_AGE = 31536000  # 1 year in seconds

# Django Hijack Settings
HIJACK_LOGIN_REDIRECT_URL = '/'  # Redirect to home page after hijacking
HIJACK_LOGOUT_REDIRECT_URL = '/admin/'  # Redirect to admin after releasing hijack
HIJACK_REGISTER_ADMIN = True  # Register hijack admin buttons
HIJACK_ALLOW_GET_REQUESTS = True  # Allow hijacking via GET requests (for convenience)
HIJACK_AUTHORIZATION_CHECK = 'hijack.permissions.superusers_only'  # Only superusers can hijack
HIJACK_DISPLAY_WARNING = True  # Show warning banner when hijacking
HIJACK_USE_BOOTSTRAP = True  # Use Bootstrap styling

# Override the default success URL to avoid 'dashboard' lookup error
HIJACK_SUCCESS_URL = '/'
